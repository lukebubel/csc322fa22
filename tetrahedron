const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
camera.position.set(0, 0, 100);
camera.lookAt(0, 0, 0);
const scene = new THREE.Scene();
const material = new THREE.MeshBasicMaterial({ color: 0x795CE6, wireframe: true });
const vertices = [
  new THREE.Vector3(0, 0, 0),
  new THREE.Vector3(20, 0, 0),
  new THREE.Vector3(10, 10 * Math.sqrt(3), 0),
  new THREE.Vector3(10, 10 * Math.sqrt(3) / 3, 10 * Math.sqrt(6) / 3)
];
const faces = [
  new THREE.Face3(0, 1, 2),
  new THREE.Face3(0, 1, 3),
  new THREE.Face3(1, 2, 3),
  new THREE.Face3(2, 0, 3)
];
const geometry = new THREE.Geometry();
geometry.vertices = vertices;
geometry.faces = faces;
const tetrahedron = new THREE.Mesh(geometry, material);
scene.add(tetrahedron);
renderer.render(scene, camera);
const animate = () => {
  requestAnimationFrame(animate);
  tetrahedron.rotation.x += 0.01;
  tetrahedron.rotation.y += 0.01;
  renderer.render(scene, camera);
};

animate();